// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/solumD/chat-server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/solumD/chat-server/internal/model"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ChatRepositoryMock implements mm_repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckChat          func(ctx context.Context, chatID int64, username string) (err error)
	funcCheckChatOrigin    string
	inspectFuncCheckChat   func(ctx context.Context, chatID int64, username string)
	afterCheckChatCounter  uint64
	beforeCheckChatCounter uint64
	CheckChatMock          mChatRepositoryMockCheckChat

	funcCreateChat          func(ctx context.Context, chat *model.Chat) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, chat *model.Chat)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcDeleteChat          func(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error)
	funcDeleteChatOrigin    string
	inspectFuncDeleteChat   func(ctx context.Context, chatID int64)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat

	funcGetUserChats          func(ctx context.Context, username string) (cpa1 []*model.Chat, err error)
	funcGetUserChatsOrigin    string
	inspectFuncGetUserChats   func(ctx context.Context, username string)
	afterGetUserChatsCounter  uint64
	beforeGetUserChatsCounter uint64
	GetUserChatsMock          mChatRepositoryMockGetUserChats

	funcSendMessage          func(ctx context.Context, message *model.Message) (ep1 *emptypb.Empty, err error)
	funcSendMessageOrigin    string
	inspectFuncSendMessage   func(ctx context.Context, message *model.Message)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatRepositoryMockSendMessage
}

// NewChatRepositoryMock returns a mock for mm_repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckChatMock = mChatRepositoryMockCheckChat{mock: m}
	m.CheckChatMock.callArgs = []*ChatRepositoryMockCheckChatParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	m.GetUserChatsMock = mChatRepositoryMockGetUserChats{mock: m}
	m.GetUserChatsMock.callArgs = []*ChatRepositoryMockGetUserChatsParams{}

	m.SendMessageMock = mChatRepositoryMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatRepositoryMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockCheckChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCheckChatExpectation
	expectations       []*ChatRepositoryMockCheckChatExpectation

	callArgs []*ChatRepositoryMockCheckChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCheckChatExpectation specifies expectation struct of the ChatRepository.CheckChat
type ChatRepositoryMockCheckChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCheckChatParams
	paramPtrs          *ChatRepositoryMockCheckChatParamPtrs
	expectationOrigins ChatRepositoryMockCheckChatExpectationOrigins
	results            *ChatRepositoryMockCheckChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCheckChatParams contains parameters of the ChatRepository.CheckChat
type ChatRepositoryMockCheckChatParams struct {
	ctx      context.Context
	chatID   int64
	username string
}

// ChatRepositoryMockCheckChatParamPtrs contains pointers to parameters of the ChatRepository.CheckChat
type ChatRepositoryMockCheckChatParamPtrs struct {
	ctx      *context.Context
	chatID   *int64
	username *string
}

// ChatRepositoryMockCheckChatResults contains results of the ChatRepository.CheckChat
type ChatRepositoryMockCheckChatResults struct {
	err error
}

// ChatRepositoryMockCheckChatOrigins contains origins of expectations of the ChatRepository.CheckChat
type ChatRepositoryMockCheckChatExpectationOrigins struct {
	origin         string
	originCtx      string
	originChatID   string
	originUsername string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckChat *mChatRepositoryMockCheckChat) Optional() *mChatRepositoryMockCheckChat {
	mmCheckChat.optional = true
	return mmCheckChat
}

// Expect sets up expected params for ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) Expect(ctx context.Context, chatID int64, username string) *mChatRepositoryMockCheckChat {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	if mmCheckChat.defaultExpectation == nil {
		mmCheckChat.defaultExpectation = &ChatRepositoryMockCheckChatExpectation{}
	}

	if mmCheckChat.defaultExpectation.paramPtrs != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by ExpectParams functions")
	}

	mmCheckChat.defaultExpectation.params = &ChatRepositoryMockCheckChatParams{ctx, chatID, username}
	mmCheckChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCheckChat.expectations {
		if minimock.Equal(e.params, mmCheckChat.defaultExpectation.params) {
			mmCheckChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckChat.defaultExpectation.params)
		}
	}

	return mmCheckChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCheckChat {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	if mmCheckChat.defaultExpectation == nil {
		mmCheckChat.defaultExpectation = &ChatRepositoryMockCheckChatExpectation{}
	}

	if mmCheckChat.defaultExpectation.params != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Expect")
	}

	if mmCheckChat.defaultExpectation.paramPtrs == nil {
		mmCheckChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCheckChatParamPtrs{}
	}
	mmCheckChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCheckChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCheckChat
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockCheckChat {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	if mmCheckChat.defaultExpectation == nil {
		mmCheckChat.defaultExpectation = &ChatRepositoryMockCheckChatExpectation{}
	}

	if mmCheckChat.defaultExpectation.params != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Expect")
	}

	if mmCheckChat.defaultExpectation.paramPtrs == nil {
		mmCheckChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCheckChatParamPtrs{}
	}
	mmCheckChat.defaultExpectation.paramPtrs.chatID = &chatID
	mmCheckChat.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmCheckChat
}

// ExpectUsernameParam3 sets up expected param username for ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) ExpectUsernameParam3(username string) *mChatRepositoryMockCheckChat {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	if mmCheckChat.defaultExpectation == nil {
		mmCheckChat.defaultExpectation = &ChatRepositoryMockCheckChatExpectation{}
	}

	if mmCheckChat.defaultExpectation.params != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Expect")
	}

	if mmCheckChat.defaultExpectation.paramPtrs == nil {
		mmCheckChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCheckChatParamPtrs{}
	}
	mmCheckChat.defaultExpectation.paramPtrs.username = &username
	mmCheckChat.defaultExpectation.expectationOrigins.originUsername = minimock.CallerInfo(1)

	return mmCheckChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) Inspect(f func(ctx context.Context, chatID int64, username string)) *mChatRepositoryMockCheckChat {
	if mmCheckChat.mock.inspectFuncCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CheckChat")
	}

	mmCheckChat.mock.inspectFuncCheckChat = f

	return mmCheckChat
}

// Return sets up results that will be returned by ChatRepository.CheckChat
func (mmCheckChat *mChatRepositoryMockCheckChat) Return(err error) *ChatRepositoryMock {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	if mmCheckChat.defaultExpectation == nil {
		mmCheckChat.defaultExpectation = &ChatRepositoryMockCheckChatExpectation{mock: mmCheckChat.mock}
	}
	mmCheckChat.defaultExpectation.results = &ChatRepositoryMockCheckChatResults{err}
	mmCheckChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCheckChat.mock
}

// Set uses given function f to mock the ChatRepository.CheckChat method
func (mmCheckChat *mChatRepositoryMockCheckChat) Set(f func(ctx context.Context, chatID int64, username string) (err error)) *ChatRepositoryMock {
	if mmCheckChat.defaultExpectation != nil {
		mmCheckChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CheckChat method")
	}

	if len(mmCheckChat.expectations) > 0 {
		mmCheckChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CheckChat method")
	}

	mmCheckChat.mock.funcCheckChat = f
	mmCheckChat.mock.funcCheckChatOrigin = minimock.CallerInfo(1)
	return mmCheckChat.mock
}

// When sets expectation for the ChatRepository.CheckChat which will trigger the result defined by the following
// Then helper
func (mmCheckChat *mChatRepositoryMockCheckChat) When(ctx context.Context, chatID int64, username string) *ChatRepositoryMockCheckChatExpectation {
	if mmCheckChat.mock.funcCheckChat != nil {
		mmCheckChat.mock.t.Fatalf("ChatRepositoryMock.CheckChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCheckChatExpectation{
		mock:               mmCheckChat.mock,
		params:             &ChatRepositoryMockCheckChatParams{ctx, chatID, username},
		expectationOrigins: ChatRepositoryMockCheckChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCheckChat.expectations = append(mmCheckChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CheckChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCheckChatExpectation) Then(err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCheckChatResults{err}
	return e.mock
}

// Times sets number of times ChatRepository.CheckChat should be invoked
func (mmCheckChat *mChatRepositoryMockCheckChat) Times(n uint64) *mChatRepositoryMockCheckChat {
	if n == 0 {
		mmCheckChat.mock.t.Fatalf("Times of ChatRepositoryMock.CheckChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckChat.expectedInvocations, n)
	mmCheckChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCheckChat
}

func (mmCheckChat *mChatRepositoryMockCheckChat) invocationsDone() bool {
	if len(mmCheckChat.expectations) == 0 && mmCheckChat.defaultExpectation == nil && mmCheckChat.mock.funcCheckChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckChat.mock.afterCheckChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckChat implements mm_repository.ChatRepository
func (mmCheckChat *ChatRepositoryMock) CheckChat(ctx context.Context, chatID int64, username string) (err error) {
	mm_atomic.AddUint64(&mmCheckChat.beforeCheckChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckChat.afterCheckChatCounter, 1)

	mmCheckChat.t.Helper()

	if mmCheckChat.inspectFuncCheckChat != nil {
		mmCheckChat.inspectFuncCheckChat(ctx, chatID, username)
	}

	mm_params := ChatRepositoryMockCheckChatParams{ctx, chatID, username}

	// Record call args
	mmCheckChat.CheckChatMock.mutex.Lock()
	mmCheckChat.CheckChatMock.callArgs = append(mmCheckChat.CheckChatMock.callArgs, &mm_params)
	mmCheckChat.CheckChatMock.mutex.Unlock()

	for _, e := range mmCheckChat.CheckChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheckChat.CheckChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckChat.CheckChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckChat.CheckChatMock.defaultExpectation.params
		mm_want_ptrs := mmCheckChat.CheckChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCheckChatParams{ctx, chatID, username}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckChat.t.Errorf("ChatRepositoryMock.CheckChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckChat.CheckChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmCheckChat.t.Errorf("ChatRepositoryMock.CheckChat got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckChat.CheckChatMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

			if mm_want_ptrs.username != nil && !minimock.Equal(*mm_want_ptrs.username, mm_got.username) {
				mmCheckChat.t.Errorf("ChatRepositoryMock.CheckChat got unexpected parameter username, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCheckChat.CheckChatMock.defaultExpectation.expectationOrigins.originUsername, *mm_want_ptrs.username, mm_got.username, minimock.Diff(*mm_want_ptrs.username, mm_got.username))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckChat.t.Errorf("ChatRepositoryMock.CheckChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCheckChat.CheckChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckChat.CheckChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckChat.t.Fatal("No results are set for the ChatRepositoryMock.CheckChat")
		}
		return (*mm_results).err
	}
	if mmCheckChat.funcCheckChat != nil {
		return mmCheckChat.funcCheckChat(ctx, chatID, username)
	}
	mmCheckChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CheckChat. %v %v %v", ctx, chatID, username)
	return
}

// CheckChatAfterCounter returns a count of finished ChatRepositoryMock.CheckChat invocations
func (mmCheckChat *ChatRepositoryMock) CheckChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckChat.afterCheckChatCounter)
}

// CheckChatBeforeCounter returns a count of ChatRepositoryMock.CheckChat invocations
func (mmCheckChat *ChatRepositoryMock) CheckChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckChat.beforeCheckChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CheckChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckChat *mChatRepositoryMockCheckChat) Calls() []*ChatRepositoryMockCheckChatParams {
	mmCheckChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCheckChatParams, len(mmCheckChat.callArgs))
	copy(argCopy, mmCheckChat.callArgs)

	mmCheckChat.mutex.RUnlock()

	return argCopy
}

// MinimockCheckChatDone returns true if the count of the CheckChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCheckChatDone() bool {
	if m.CheckChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckChatMock.invocationsDone()
}

// MinimockCheckChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCheckChatInspect() {
	for _, e := range m.CheckChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCheckChatCounter := mm_atomic.LoadUint64(&m.afterCheckChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckChatMock.defaultExpectation != nil && afterCheckChatCounter < 1 {
		if m.CheckChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChat at\n%s", m.CheckChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CheckChat at\n%s with params: %#v", m.CheckChatMock.defaultExpectation.expectationOrigins.origin, *m.CheckChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckChat != nil && afterCheckChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CheckChat at\n%s", m.funcCheckChatOrigin)
	}

	if !m.CheckChatMock.invocationsDone() && afterCheckChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CheckChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CheckChatMock.expectedInvocations), m.CheckChatMock.expectedInvocationsOrigin, afterCheckChatCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx  context.Context
	chat *model.Chat
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx  *context.Context
	chat **model.Chat
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin     string
	originCtx  string
	originChat string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, chat *model.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, chat}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectChatParam2 sets up expected param chat for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectChatParam2(chat *model.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.chat = &chat
	mmCreateChat.defaultExpectation.expectationOrigins.originChat = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, chat *model.Chat)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, chat *model.Chat) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, chat *model.Chat) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx, chat},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, chat *model.Chat) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, chat)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, chat}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, chat}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chat != nil && !minimock.Equal(*mm_want_ptrs.chat, mm_got.chat) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter chat, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originChat, *mm_want_ptrs.chat, mm_got.chat, minimock.Diff(*mm_want_ptrs.chat, mm_got.chat))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, chat)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, chat)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockDeleteChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockDeleteChatParams
	paramPtrs          *ChatRepositoryMockDeleteChatParamPtrs
	expectationOrigins ChatRepositoryMockDeleteChatExpectationOrigins
	results            *ChatRepositoryMockDeleteChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx    context.Context
	chatID int64
}

// ChatRepositoryMockDeleteChatParamPtrs contains pointers to parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	ep1 *emptypb.Empty
	err error
}

// ChatRepositoryMockDeleteChatOrigins contains origins of expectations of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Optional() *mChatRepositoryMockDeleteChat {
	mmDeleteChat.optional = true
	return mmDeleteChat
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.paramPtrs != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by ExpectParams functions")
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, chatID}
	mmDeleteChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmDeleteChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDeleteChat
}

// ExpectChatIDParam2 sets up expected param chatID for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) ExpectChatIDParam2(chatID int64) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	if mmDeleteChat.defaultExpectation.params != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Expect")
	}

	if mmDeleteChat.defaultExpectation.paramPtrs == nil {
		mmDeleteChat.defaultExpectation.paramPtrs = &ChatRepositoryMockDeleteChatParamPtrs{}
	}
	mmDeleteChat.defaultExpectation.paramPtrs.chatID = &chatID
	mmDeleteChat.defaultExpectation.expectationOrigins.originChatID = minimock.CallerInfo(1)

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, chatID int64)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	mmDeleteChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	mmDeleteChat.mock.funcDeleteChatOrigin = minimock.CallerInfo(1)
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, chatID int64) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:               mmDeleteChat.mock,
		params:             &ChatRepositoryMockDeleteChatParams{ctx, chatID},
		expectationOrigins: ChatRepositoryMockDeleteChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	return e.mock
}

// Times sets number of times ChatRepository.DeleteChat should be invoked
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Times(n uint64) *mChatRepositoryMockDeleteChat {
	if n == 0 {
		mmDeleteChat.mock.t.Fatalf("Times of ChatRepositoryMock.DeleteChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteChat.expectedInvocations, n)
	mmDeleteChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDeleteChat
}

func (mmDeleteChat *mChatRepositoryMockDeleteChat) invocationsDone() bool {
	if len(mmDeleteChat.expectations) == 0 && mmDeleteChat.defaultExpectation == nil && mmDeleteChat.mock.funcDeleteChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteChat.mock.afterDeleteChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteChat implements mm_repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, chatID int64) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	mmDeleteChat.t.Helper()

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, chatID)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, chatID}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteChat.DeleteChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockDeleteChatParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameter chatID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.originChatID, *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDeleteChat.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, chatID)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, chatID)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	if m.DeleteChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteChatMock.invocationsDone()
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteChatCounter := mm_atomic.LoadUint64(&m.afterDeleteChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && afterDeleteChatCounter < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.DeleteChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s with params: %#v", m.DeleteChatMock.defaultExpectation.expectationOrigins.origin, *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && afterDeleteChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat at\n%s", m.funcDeleteChatOrigin)
	}

	if !m.DeleteChatMock.invocationsDone() && afterDeleteChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.DeleteChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteChatMock.expectedInvocations), m.DeleteChatMock.expectedInvocationsOrigin, afterDeleteChatCounter)
	}
}

type mChatRepositoryMockGetUserChats struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetUserChatsExpectation
	expectations       []*ChatRepositoryMockGetUserChatsExpectation

	callArgs []*ChatRepositoryMockGetUserChatsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetUserChatsExpectation specifies expectation struct of the ChatRepository.GetUserChats
type ChatRepositoryMockGetUserChatsExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetUserChatsParams
	paramPtrs          *ChatRepositoryMockGetUserChatsParamPtrs
	expectationOrigins ChatRepositoryMockGetUserChatsExpectationOrigins
	results            *ChatRepositoryMockGetUserChatsResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetUserChatsParams contains parameters of the ChatRepository.GetUserChats
type ChatRepositoryMockGetUserChatsParams struct {
	ctx      context.Context
	username string
}

// ChatRepositoryMockGetUserChatsParamPtrs contains pointers to parameters of the ChatRepository.GetUserChats
type ChatRepositoryMockGetUserChatsParamPtrs struct {
	ctx      *context.Context
	username *string
}

// ChatRepositoryMockGetUserChatsResults contains results of the ChatRepository.GetUserChats
type ChatRepositoryMockGetUserChatsResults struct {
	cpa1 []*model.Chat
	err  error
}

// ChatRepositoryMockGetUserChatsOrigins contains origins of expectations of the ChatRepository.GetUserChats
type ChatRepositoryMockGetUserChatsExpectationOrigins struct {
	origin         string
	originCtx      string
	originUsername string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Optional() *mChatRepositoryMockGetUserChats {
	mmGetUserChats.optional = true
	return mmGetUserChats
}

// Expect sets up expected params for ChatRepository.GetUserChats
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Expect(ctx context.Context, username string) *mChatRepositoryMockGetUserChats {
	if mmGetUserChats.mock.funcGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Set")
	}

	if mmGetUserChats.defaultExpectation == nil {
		mmGetUserChats.defaultExpectation = &ChatRepositoryMockGetUserChatsExpectation{}
	}

	if mmGetUserChats.defaultExpectation.paramPtrs != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by ExpectParams functions")
	}

	mmGetUserChats.defaultExpectation.params = &ChatRepositoryMockGetUserChatsParams{ctx, username}
	mmGetUserChats.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUserChats.expectations {
		if minimock.Equal(e.params, mmGetUserChats.defaultExpectation.params) {
			mmGetUserChats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserChats.defaultExpectation.params)
		}
	}

	return mmGetUserChats
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetUserChats
func (mmGetUserChats *mChatRepositoryMockGetUserChats) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetUserChats {
	if mmGetUserChats.mock.funcGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Set")
	}

	if mmGetUserChats.defaultExpectation == nil {
		mmGetUserChats.defaultExpectation = &ChatRepositoryMockGetUserChatsExpectation{}
	}

	if mmGetUserChats.defaultExpectation.params != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Expect")
	}

	if mmGetUserChats.defaultExpectation.paramPtrs == nil {
		mmGetUserChats.defaultExpectation.paramPtrs = &ChatRepositoryMockGetUserChatsParamPtrs{}
	}
	mmGetUserChats.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUserChats.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUserChats
}

// ExpectUsernameParam2 sets up expected param username for ChatRepository.GetUserChats
func (mmGetUserChats *mChatRepositoryMockGetUserChats) ExpectUsernameParam2(username string) *mChatRepositoryMockGetUserChats {
	if mmGetUserChats.mock.funcGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Set")
	}

	if mmGetUserChats.defaultExpectation == nil {
		mmGetUserChats.defaultExpectation = &ChatRepositoryMockGetUserChatsExpectation{}
	}

	if mmGetUserChats.defaultExpectation.params != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Expect")
	}

	if mmGetUserChats.defaultExpectation.paramPtrs == nil {
		mmGetUserChats.defaultExpectation.paramPtrs = &ChatRepositoryMockGetUserChatsParamPtrs{}
	}
	mmGetUserChats.defaultExpectation.paramPtrs.username = &username
	mmGetUserChats.defaultExpectation.expectationOrigins.originUsername = minimock.CallerInfo(1)

	return mmGetUserChats
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetUserChats
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Inspect(f func(ctx context.Context, username string)) *mChatRepositoryMockGetUserChats {
	if mmGetUserChats.mock.inspectFuncGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetUserChats")
	}

	mmGetUserChats.mock.inspectFuncGetUserChats = f

	return mmGetUserChats
}

// Return sets up results that will be returned by ChatRepository.GetUserChats
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Return(cpa1 []*model.Chat, err error) *ChatRepositoryMock {
	if mmGetUserChats.mock.funcGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Set")
	}

	if mmGetUserChats.defaultExpectation == nil {
		mmGetUserChats.defaultExpectation = &ChatRepositoryMockGetUserChatsExpectation{mock: mmGetUserChats.mock}
	}
	mmGetUserChats.defaultExpectation.results = &ChatRepositoryMockGetUserChatsResults{cpa1, err}
	mmGetUserChats.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUserChats.mock
}

// Set uses given function f to mock the ChatRepository.GetUserChats method
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Set(f func(ctx context.Context, username string) (cpa1 []*model.Chat, err error)) *ChatRepositoryMock {
	if mmGetUserChats.defaultExpectation != nil {
		mmGetUserChats.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetUserChats method")
	}

	if len(mmGetUserChats.expectations) > 0 {
		mmGetUserChats.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetUserChats method")
	}

	mmGetUserChats.mock.funcGetUserChats = f
	mmGetUserChats.mock.funcGetUserChatsOrigin = minimock.CallerInfo(1)
	return mmGetUserChats.mock
}

// When sets expectation for the ChatRepository.GetUserChats which will trigger the result defined by the following
// Then helper
func (mmGetUserChats *mChatRepositoryMockGetUserChats) When(ctx context.Context, username string) *ChatRepositoryMockGetUserChatsExpectation {
	if mmGetUserChats.mock.funcGetUserChats != nil {
		mmGetUserChats.mock.t.Fatalf("ChatRepositoryMock.GetUserChats mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetUserChatsExpectation{
		mock:               mmGetUserChats.mock,
		params:             &ChatRepositoryMockGetUserChatsParams{ctx, username},
		expectationOrigins: ChatRepositoryMockGetUserChatsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUserChats.expectations = append(mmGetUserChats.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetUserChats return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetUserChatsExpectation) Then(cpa1 []*model.Chat, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetUserChatsResults{cpa1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetUserChats should be invoked
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Times(n uint64) *mChatRepositoryMockGetUserChats {
	if n == 0 {
		mmGetUserChats.mock.t.Fatalf("Times of ChatRepositoryMock.GetUserChats mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserChats.expectedInvocations, n)
	mmGetUserChats.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUserChats
}

func (mmGetUserChats *mChatRepositoryMockGetUserChats) invocationsDone() bool {
	if len(mmGetUserChats.expectations) == 0 && mmGetUserChats.defaultExpectation == nil && mmGetUserChats.mock.funcGetUserChats == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserChats.mock.afterGetUserChatsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserChats.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserChats implements mm_repository.ChatRepository
func (mmGetUserChats *ChatRepositoryMock) GetUserChats(ctx context.Context, username string) (cpa1 []*model.Chat, err error) {
	mm_atomic.AddUint64(&mmGetUserChats.beforeGetUserChatsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserChats.afterGetUserChatsCounter, 1)

	mmGetUserChats.t.Helper()

	if mmGetUserChats.inspectFuncGetUserChats != nil {
		mmGetUserChats.inspectFuncGetUserChats(ctx, username)
	}

	mm_params := ChatRepositoryMockGetUserChatsParams{ctx, username}

	// Record call args
	mmGetUserChats.GetUserChatsMock.mutex.Lock()
	mmGetUserChats.GetUserChatsMock.callArgs = append(mmGetUserChats.GetUserChatsMock.callArgs, &mm_params)
	mmGetUserChats.GetUserChatsMock.mutex.Unlock()

	for _, e := range mmGetUserChats.GetUserChatsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetUserChats.GetUserChatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserChats.GetUserChatsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserChats.GetUserChatsMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserChats.GetUserChatsMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetUserChatsParams{ctx, username}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserChats.t.Errorf("ChatRepositoryMock.GetUserChats got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserChats.GetUserChatsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.username != nil && !minimock.Equal(*mm_want_ptrs.username, mm_got.username) {
				mmGetUserChats.t.Errorf("ChatRepositoryMock.GetUserChats got unexpected parameter username, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserChats.GetUserChatsMock.defaultExpectation.expectationOrigins.originUsername, *mm_want_ptrs.username, mm_got.username, minimock.Diff(*mm_want_ptrs.username, mm_got.username))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserChats.t.Errorf("ChatRepositoryMock.GetUserChats got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUserChats.GetUserChatsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserChats.GetUserChatsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserChats.t.Fatal("No results are set for the ChatRepositoryMock.GetUserChats")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetUserChats.funcGetUserChats != nil {
		return mmGetUserChats.funcGetUserChats(ctx, username)
	}
	mmGetUserChats.t.Fatalf("Unexpected call to ChatRepositoryMock.GetUserChats. %v %v", ctx, username)
	return
}

// GetUserChatsAfterCounter returns a count of finished ChatRepositoryMock.GetUserChats invocations
func (mmGetUserChats *ChatRepositoryMock) GetUserChatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserChats.afterGetUserChatsCounter)
}

// GetUserChatsBeforeCounter returns a count of ChatRepositoryMock.GetUserChats invocations
func (mmGetUserChats *ChatRepositoryMock) GetUserChatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserChats.beforeGetUserChatsCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetUserChats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserChats *mChatRepositoryMockGetUserChats) Calls() []*ChatRepositoryMockGetUserChatsParams {
	mmGetUserChats.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetUserChatsParams, len(mmGetUserChats.callArgs))
	copy(argCopy, mmGetUserChats.callArgs)

	mmGetUserChats.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserChatsDone returns true if the count of the GetUserChats invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetUserChatsDone() bool {
	if m.GetUserChatsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserChatsMock.invocationsDone()
}

// MinimockGetUserChatsInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetUserChatsInspect() {
	for _, e := range m.GetUserChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetUserChats at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserChatsCounter := mm_atomic.LoadUint64(&m.afterGetUserChatsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserChatsMock.defaultExpectation != nil && afterGetUserChatsCounter < 1 {
		if m.GetUserChatsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetUserChats at\n%s", m.GetUserChatsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetUserChats at\n%s with params: %#v", m.GetUserChatsMock.defaultExpectation.expectationOrigins.origin, *m.GetUserChatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserChats != nil && afterGetUserChatsCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetUserChats at\n%s", m.funcGetUserChatsOrigin)
	}

	if !m.GetUserChatsMock.invocationsDone() && afterGetUserChatsCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetUserChats at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserChatsMock.expectedInvocations), m.GetUserChatsMock.expectedInvocationsOrigin, afterGetUserChatsCounter)
	}
}

type mChatRepositoryMockSendMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockSendMessageExpectation
	expectations       []*ChatRepositoryMockSendMessageExpectation

	callArgs []*ChatRepositoryMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockSendMessageExpectation specifies expectation struct of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockSendMessageParams
	paramPtrs          *ChatRepositoryMockSendMessageParamPtrs
	expectationOrigins ChatRepositoryMockSendMessageExpectationOrigins
	results            *ChatRepositoryMockSendMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockSendMessageParams contains parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParams struct {
	ctx     context.Context
	message *model.Message
}

// ChatRepositoryMockSendMessageParamPtrs contains pointers to parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParamPtrs struct {
	ctx     *context.Context
	message **model.Message
}

// ChatRepositoryMockSendMessageResults contains results of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageResults struct {
	ep1 *emptypb.Empty
	err error
}

// ChatRepositoryMockSendMessageOrigins contains origins of expectations of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectationOrigins struct {
	origin        string
	originCtx     string
	originMessage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mChatRepositoryMockSendMessage) Optional() *mChatRepositoryMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Expect(ctx context.Context, message *model.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &ChatRepositoryMockSendMessageParams{ctx, message}
	mmSendMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendMessage
}

// ExpectMessageParam2 sets up expected param message for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectMessageParam2(message *model.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.message = &message
	mmSendMessage.defaultExpectation.expectationOrigins.originMessage = minimock.CallerInfo(1)

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Inspect(f func(ctx context.Context, message *model.Message)) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Return(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ChatRepositoryMockSendMessageResults{ep1, err}
	mmSendMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// Set uses given function f to mock the ChatRepository.SendMessage method
func (mmSendMessage *mChatRepositoryMockSendMessage) Set(f func(ctx context.Context, message *model.Message) (ep1 *emptypb.Empty, err error)) *ChatRepositoryMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	mmSendMessage.mock.funcSendMessageOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// When sets expectation for the ChatRepository.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mChatRepositoryMockSendMessage) When(ctx context.Context, message *model.Message) *ChatRepositoryMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockSendMessageExpectation{
		mock:               mmSendMessage.mock,
		params:             &ChatRepositoryMockSendMessageParams{ctx, message},
		expectationOrigins: ChatRepositoryMockSendMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.SendMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockSendMessageExpectation) Then(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockSendMessageResults{ep1, err}
	return e.mock
}

// Times sets number of times ChatRepository.SendMessage should be invoked
func (mmSendMessage *mChatRepositoryMockSendMessage) Times(n uint64) *mChatRepositoryMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of ChatRepositoryMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	mmSendMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessage
}

func (mmSendMessage *mChatRepositoryMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements mm_repository.ChatRepository
func (mmSendMessage *ChatRepositoryMock) SendMessage(ctx context.Context, message *model.Message) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	mmSendMessage.t.Helper()

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, message)
	}

	mm_params := ChatRepositoryMockSendMessageParams{ctx, message}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockSendMessageParams{ctx, message}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.message != nil && !minimock.Equal(*mm_want_ptrs.message, mm_got.message) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter message, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originMessage, *mm_want_ptrs.message, mm_got.message, minimock.Diff(*mm_want_ptrs.message, mm_got.message))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ChatRepositoryMock.SendMessage")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, message)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.SendMessage. %v %v", ctx, message)
	return
}

// SendMessageAfterCounter returns a count of finished ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatRepositoryMockSendMessage) Calls() []*ChatRepositoryMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.SendMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", m.SendMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.funcSendMessageOrigin)
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.SendMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), m.SendMessageMock.expectedInvocationsOrigin, afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckChatInspect()

			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockGetUserChatsInspect()

			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckChatDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockGetUserChatsDone() &&
		m.MinimockSendMessageDone()
}
